#! /usr/bin/env bash

#############################################################################
# Functions
#############################################################################

# github_purge_password
github_purge_password() {
  FILE_TO_PURGE="${1}"
  git filter-branch \
    --force \
    --index-filter "git rm --cached --ignore-unmatch ${FILE_TO_PURGE}" \
    --prune-empty \
    --tag-name-filter cat \
    -- \
    --all
}

# new debian machine-id
function new_debian_machine_id() {
  sudo rm -f /etc/machine-id
  sudo dbus-uuidgen --ensure=/etc/machine-id
}

# Find a certain mask in all epi queries
function epis_with_mask() {
  export MASK_LOOKING_FOR=${1}
  for file in $(find . -type f | grep -v '\.git'); do
    FILE_BITMASK=$(head -n +5 "${file}" | grep role | cut -f 2 -d: | tr -d ' ')
    [[ $FILE_BITMASK =~ ^-?[0-9]+$ ]] && [ $((${FILE_BITMASK} & ${MASK_LOOKING_FOR})) -gt 0 ] && echo $file \| ${FILE_BITMASK}
  done
}

rl() {
  for file in $(echo $BENVIRONMENT_FILES_TO_LOAD); do
    FILE_CACHE_ALIASES="${HOME}/run/.${file}"
    [ -f "${FILE_CACHE_ALIASES}" ] && rm "${FILE_CACHE_ALIASES}" && echo "Purged ${FILE_CACHE_ALIASES}"
    if [ -f "./${file}" ]; then
      cp "./${file}" "${FILE_CACHE_ALIASES}"
    fi
  done

  if [ -f "./.benvironment" ]; then
    cp "./.benvironment" "${HOME}/.benvironment"
  else
    curl -s "${URL_PATH_TO_ENV_FILES}/.benvironment" -o "${HOME}/.benvironment"
  fi
  zsh
}

######################################
# Bash Function: Configure No Sudo Password
######################################
# This Bash function adds the current user to the "sudo" group, allowing
# them to execute commands with superuser privileges without the need
# to enter a password each time. The function uses the `usermod` command
# to append the user to the "sudo" group.
#
# Usage:
#   no_sudo_password
#
# Notes:
# - The function assumes that the system user invoking this function has
#   sufficient privileges to use the `sudo` command.
# - The `-aG` option of the `usermod` command appends the user to the
#   specified group without removing them from other groups.
# - Granting a user the ability to use sudo without a password reduces the
#   security of the system, as it provides elevated privileges without
#   requiring password authentication.
#
# Example:
#   no_sudo_password
#
# Important:
# - This function should be used with caution, and only when absolutely
#   necessary. It's recommended to understand the implications of this action
#   before enabling passwordless sudo access.
######################################
no_sudo_password() {
  # Add the current user to the "sudo" group using the usermod command
  # This grants the user the ability to execute commands with superuser
  # privileges without requiring a password each time.
  sudo usermod -aG sudo ${USER}
  sudo sed -i 's/%sudo.*ALL=(ALL:ALL).*ALL/%sudo   ALL=(ALL:ALL) NOPASSWD: ALL/' /etc/sudoers
}

# app
#
#  Open a URL in APP Mode in Chrome
#  If anything is not checked in yet
app() {
  # Linux
  if which google-chrome > /dev/null; then
    google-chrome --kiosk --app="$1"
  fi

  # Mac
  if [ -d '/Applications/Google Chrome.app/Contents/MacOS/Google Chrome' ]; then
    '/Applications/Google Chrome.app/Contents/MacOS/Google Chrome' --kiosk --app="$1"
  fi
}

gmail() {
  app 'http://gmail.com'
}

teams() {
  app 'https://teams.microsoft.com'
}

outlook() {
  app 'http://outlook.office365.com'
}

docs() {
  app 'https://devdocs.io/'
}

# csd
#
#  loop through each directory in the starphleet dev dir and check
#  If anything is not checked in yet
csd() {
  CURRENT_DIR=${PWD}
  for dir in $(find ${DIR_STARPHLEET_DEV} -maxdepth 2 -type d -name "git")
  do
    echo "$dir"
    cd $dir
    [ -d "./.git" ] && git status -s
  done
  for dir in $(find ${HOME}/starphleet_data -maxdepth 1 -type d)
  do
    echo "$dir"
    cd $dir
    [ -d "./.git" ] && git status -s
  done
  cd ${CURRENT_DIR}
}

# ccd
#
#  loop through each directory in the current dir and check
#  If anything is not checked in yet
ccd() {
  CURRENT_DIR=${PWD}
  for dir in $(find ${PWD} -maxdepth 2 -type d -name ".git")
  do
    CHANGE_TO=$(dirname "${dir}")
    echo "$CHANGE_TO"
    cd $CHANGE_TO
    [ -d "./.git" ] && git status -s
    CHECK=$(git diff $(git remote | head -n 1)/$(git branch --show-current) 2> /dev/null)
    [ $? -eq 0 ] && [ -n "$CHECK" ] && echo -e "   ${red}Needs Push${end}"
  done
  cd ${CURRENT_DIR}
}

# ccd_clean
#
#  loop through each directory in the current dir and check
#  If anything is not checked in yet
ccd_clean() {
  CURRENT_DIR=${PWD}
  for dir in $(find ${PWD} -maxdepth 2 -type d -name ".git")
  do
    CHANGE_TO=$(dirname "${dir}")
    echo "$CHANGE_TO"
    cd $CHANGE_TO

    unset CHECK
    CHECK=$([ -d "./.git" ] && git status -s)
    if [ -n "$CHECK" ]; then
      echo "You have code to commit: $CHANGE_TO"
      continue
    fi

    # Make sure all changes have been pushed to our 'source'
    unset CHECK
    CHECK=$(git diff $(git remote | head -n 1)/$(git branch --show-current) 2> /dev/null)
    if [ $? -ne 0 ] || [ -n "$CHECK" ]; then
      echo "You still need to push your changes in $CHANGE_TO"
      continue
    fi

    cd ..
    rm -rf "$CHANGE_TO"
  done
  cd ${CURRENT_DIR}
}

# Create a default git ignore
#
gi() {
cat << EOF > ./.gitignore
# Compiled source #
###################
*.com
*.class
*.dll
*.exe
*.o
*.so
.env

# Packages #
############
# it's better to unpack these files and commit the raw source
# git has its own built in compression methods
*.7z
*.dmg
*.gz
*.iso
*.jar
*.rar
*.tar
*.zip

# Logs and databases #
######################
*.log
*.sql
*.sqlite

# OS generated files #
######################
runme
test
.DS_Store
.DS_Store?
*.swp
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db
node_modules
*.tfstate
*.tfstate.backup
.terraform

# Often don't want to lock till I'm ready #
######################
package-lock.json
EOF
}

# Create UniBeautify Config
#
#  Create a UniBeautify Config for VSCode
ub() {
cat << EOF > ./.unibeautifyrc.json
{
  "JavaScript": {
    "beautifiers": [
      "JS-Beautify",
      "ESLint"
    ],
    "brace_style": "collapse,preserve-inline",
    "object_curly_spacing": true,
    "preserve_newlines": true,
    "remove_trailing_whitespace": true,
    "space_in_empty_paren": false,
    "space_after_anon_function": false,
    "space_before_conditional": true,
    "space_in_paren": false,
    "unescape_strings": false,
    "wrap_line_length": 0,
    "multiline_ternary": "never",
    "max_preserve_newlines": 10,
    "keep_array_indentation": false,
    "jsx_brackets": false,
    "jslint_happy": false,
    "indent_style": "space",
    "indent_size": 2,
    "indent_level": 0,
    "indent_comments": false,
    "indent_char": " ",
    "indent_chained_methods": true,
    "end_with_semicolon": true,
    "keep_function_indentation": false,
    "end_with_newline": true,
    "end_with_comma": false,
    "operator_position": "after-newline",
    "comma_first": false,
    "break_chained_methods": false,
    "arrow_parens": "as-needed",
    "align_assignments": true
  }
}
EOF
}

# Create JSBeautify Config
#
#  Create a ESLint Configuration file in the current directory
jsb() {
cat << EOF > ./.jsbeautifyrc
{
  "brace_style": "collapse,preserve-inline",
  "object_curly_spacing": true,
  "preserve_newlines": true,
  "remove_trailing_whitespace": true,
  "space_in_empty_paren": false,
  "space_after_anon_function": false,
  "space_before_conditional": true,
  "space_in_paren": false,
  "unescape_strings": false,
  "wrap_line_length": 0,
  "multiline_ternary": "never",
  "max_preserve_newlines": 10,
  "keep_array_indentation": false,
  "jsx_brackets": false,
  "jslint_happy": false,
  "indent_style": "space",
  "indent_size": 2,
  "indent_level": 0,
  "indent_comments": false,
  "indent_char": " ",
  "indent_chained_methods": true,
  "end_with_semicolon": true,
  "keep_function_indentation": false,
  "end_with_newline": true,
  "end_with_comma": false,
  "operator_position": "after-newline",
  "comma_first": false,
  "break_chained_methods": false,
  "arrow_parens": "as-needed",
  "align_assignments": true
}
EOF
}

# Create an ESLINT Config
#
#  Create a ESLint Configuration file in the current directory
ei() {
cat << EOF > ./.eslintrc.json
{
  "env": {
    "jest": true,
    "es6": true,
    "node": true
  },
  "extends": "eslint:recommended",
  "parserOptions": {
    "sourceType": "module",
    "ecmaVersion": 2020
  },
  "rules": {
    "accessor-pairs": "error",
    "array-bracket-spacing": ["error", "never"],
    "array-callback-return": "error",
    "arrow-body-style": ["error", "as-needed"],
    "arrow-parens": "off",
    "arrow-spacing": [
      "error",
      {
        "after": true,
        "before": true
      }
    ],
    "block-scoped-var": "error",
    "block-spacing": "error",
    "brace-style": ["error", "1tbs"],
    "callback-return": "error",
    "camelcase": [
      "error",
      {
        "properties": "never"
      }
    ],
    "comma-spacing": [
      "error",
      {
        "after": true,
        "before": false
      }
    ],
    "comma-style": ["error", "last"],
    "complexity": "error",
    "computed-property-spacing": ["error", "never"],
    "consistent-return": "off",
    "consistent-this": "error",
    "curly": "error",
    "default-case": "error",
    "dot-location": ["error", "property"],
    "dot-notation": [
      "error",
      {
        "allowKeywords": true
      }
    ],
    "eol-last": "error",
    "eqeqeq": "error",
    "func-names": "off",
    "func-style": "off",
    "generator-star-spacing": "error",
    "global-require": "error",
    "guard-for-in": "off",
    "handle-callback-err": "error",
    "id-blacklist": "error",
    "id-length": "off",
    "id-match": "error",
    "indent": "off",
    "init-declarations": "off",
    "jsx-quotes": "error",
    "key-spacing": "error",
    "keyword-spacing": [
      "error",
      {
        "after": true,
        "before": true
      }
    ],
    "linebreak-style": ["error", "unix"],
    "lines-around-comment": "off",
    "max-depth": "error",
    "max-len": "off",
    "max-nested-callbacks": "error",
    "max-params": "error",
    "max-statements": "off",
    "max-statements-per-line": "error",
    "new-cap": "error",
    "new-parens": "error",
    "newline-after-var": "off",
    "newline-before-return": "off",
    "newline-per-chained-call": "off",
    "no-alert": "error",
    "no-array-constructor": "error",
    "no-bitwise": "off",
    "no-caller": "error",
    "no-catch-shadow": "error",
    "no-confusing-arrow": "off",
    "no-continue": "error",
    "no-div-regex": "error",
    "no-duplicate-imports": "error",
    "no-else-return": "error",
    "no-empty-function": "error",
    "no-eq-null": "error",
    "no-eval": "error",
    "no-extend-native": "error",
    "no-extra-bind": "error",
    "no-extra-label": "error",
    "no-extra-parens": "off",
    "no-floating-decimal": "error",
    "no-implicit-coercion": "off",
    "no-implicit-globals": "error",
    "no-implied-eval": "error",
    "no-inline-comments": "off",
    "no-inner-declarations": ["error", "functions"],
    "no-invalid-this": "off",
    "no-iterator": "error",
    "no-label-var": "error",
    "no-labels": "error",
    "no-lone-blocks": "error",
    "no-lonely-if": "error",
    "no-loop-func": "error",
    "no-magic-numbers": "off",
    "no-mixed-requires": "error",
    "no-multi-spaces": "error",
    "no-multi-str": "error",
    "no-multiple-empty-lines": "error",
    "no-native-reassign": "error",
    "no-negated-condition": "error",
    "no-nested-ternary": "error",
    "no-new": "error",
    "no-new-func": "error",
    "no-new-object": "error",
    "no-new-require": "error",
    "no-new-wrappers": "error",
    "no-octal-escape": "error",
    "no-param-reassign": [
      "error",
      {
        "props": false
      }
    ],
    "no-path-concat": "error",
    "no-plusplus": "off",
    "no-process-env": "off",
    "no-process-exit": "off",
    "no-proto": "error",
    "no-restricted-globals": "error",
    "no-restricted-imports": "error",
    "no-restricted-modules": "error",
    "no-restricted-syntax": "error",
    "no-return-assign": "error",
    "no-script-url": "error",
    "no-self-compare": "error",
    "no-sequences": "error",
    "no-shadow": "off",
    "no-shadow-restricted-names": "error",
    "no-spaced-func": "error",
    "no-sync": "off",
    "no-ternary": "off",
    "no-throw-literal": "error",
    "no-trailing-spaces": "error",
    "no-undef-init": "error",
    "no-undefined": "off",
    "no-underscore-dangle": "off",
    "no-unmodified-loop-condition": "error",
    "no-unneeded-ternary": "error",
    "no-unused-expressions": "error",
    "no-use-before-define": "off",
    "no-useless-call": "error",
    "no-useless-concat": "off",
    "no-useless-constructor": "error",
    "no-useless-escape": "error",
    "no-var": "off",
    "no-void": "error",
    "no-warning-comments": "off",
    "no-whitespace-before-property": "error",
    "no-with": "error",
    "object-curly-spacing": ["error", "always"],
    "object-shorthand": "off",
    "one-var": "off",
    "one-var-declaration-per-line": "error",
    "operator-assignment": ["error", "always"],
    "operator-linebreak": "error",
    "padded-blocks": "off",
    "prefer-arrow-callback": "off",
    "prefer-const": "off",
    "prefer-reflect": "off",
    "prefer-rest-params": "error",
    "prefer-spread": "error",
    "prefer-template": "off",
    "quote-props": "off",
    "quotes": "off",
    "radix": "error",
    "require-jsdoc": "off",
    "require-yield": "error",
    "semi": "error",
    "semi-spacing": "error",
    "sort-imports": "error",
    "sort-vars": "error",
    "space-before-blocks": "error",
    "space-before-function-paren": "off",
    "space-in-parens": ["error", "never"],
    "space-infix-ops": "error",
    "space-unary-ops": "error",
    "spaced-comment": "off",
    "strict": "off",
    "template-curly-spacing": "error",
    "valid-jsdoc": "off",
    "vars-on-top": "off",
    "wrap-iife": "error",
    "wrap-regex": "error",
    "yield-star-spacing": "error",
    "yoda": ["error", "never"]
  }
}
EOF
}

admin() {
  ssh -i "${HOME}/.ssh/glguser" "ubuntu@${1}"
}

db() {
  ssh -i "${HOME}/.ssh/devdb" "ubuntu@${1}"
}

hack_root() {
  HOST="${1}"
  ssh -oStrictHostKeyChecking=no -oUserKnownHostsFile=/dev/null "admiral@${HOST}" "sudo bash -c '[ ! -f /root/.ssh/.authorized_keys.org ] && cp /root/.ssh/authorized_keys /root/.ssh/.authorized_keys.org || true'"
  ssh -oStrictHostKeyChecking=no -oUserKnownHostsFile=/dev/null "admiral@${HOST}" "sudo cp '/root/.ssh/.authorized_keys.org' '/root/.ssh/authorized_keys'"
  ssh -oStrictHostKeyChecking=no -oUserKnownHostsFile=/dev/null "admiral@${HOST}" "cat /home/admiral/.ssh/authorized_keys | sudo tee -a /root/.ssh/authorized_keys"
}

ds () {
  rsync -ravP /Users/benjamin/reverts/starphleet/ root@benjaminhudgens.glgresearch.com:/starphleet/
  ssh root@benjaminhudgens.glgresearch.com "cd /starphleet/provision; ./patch"
}

# Move my copy function from .zshrc
c () {
  cat $1 | pbcopy
}

##########################################################
# Assume the person has zero tmux session open and
# build one that connects to all the machines specified.
# As a convenience, we also accept a list of IP addresses
#
# Usage:    connect_to_all_machines $ip1 $ip2
##########################################################
function connect_to_all_machines() {
  MACHINES=$@
  SSH_USER=${SSH_USER:-$USER}

  if [ -z "${TMUX}" ]; then
    tmux new-session -d
    PANE_ID=0
    SESSION=0
    window=${SESSION}:0
  else
    PANE_ID=0
    SESSION=$(tmux display-message -p '#S')
    window=${SESSION}:$(tmux display-message -p '#I')
  fi

  for machine in $(echo $MACHINES); do
    [ $PANE_ID -gt 0 ] && tmux split-window
    [ $PANE_ID -gt 0 ] && tmux select-layout even-vertical
    pane=${window}.$((PANE_ID++))
    tmux send-keys -t "$pane" "ssh ${SSH_USER}@${machine}" Enter
    tmux send-keys -t "$pane" "clear" Enter
  done
  tmux setw sync

  if [ -z "${TMUX}" ]; then
    tmux attach-session -t "$SESSION"
  fi
}

##########################################################
# Ask the bot for info about a tags devdb
#
# Example:
#   devdb continuousoperations
##########################################################
devdb () {
  curl -s "${DEVDB_INFO_URL}${1}" | jq
}

##########################################################
# Starphleet Connect
#
# Example:
#  ➜  ~ sc
#  Connect to which server:
#   1) virginia.glgresearch.com
#   2) singapore.glgresearch.com
#   3) jobs.glgresearch.com
#   4) email.glgresearch.com
#   5) benjaminhudgens.glgresearch.com
#   6) bulkmail.glgresearch.com
#   7) notsplunk.glgresearch.com
#   8) syslog.glgresearch.com
#   9) accounting.glgresearch.com
#  10) vpcvirginia.glgresearch.com
#  11) vpcsingapore.glgresearch.com
#  12) china.glgresearch.com
#  13) moserca.glgresearch.com
#  14) marklar.glgresearch.com
#  15) services-buildserver.glgresearch.com
#?
##########################################################
sc () {
  STARPHLEET_ENHANCE_CACHE="/tmp/se.cache"
  if [ ! -f "${STARPHLEET_ENHANCE_CACHE}/connect.sh" ]; then
    rm -rf "${STARPHLEET_ENHANCE_CACHE}"
  fi
  if [ ! -d "${STARPHLEET_ENHANCE_CACHE}" ]; then
    git clone git@github.com:glg/starphleet-enhance.git "${STARPHLEET_ENHANCE_CACHE}"
  fi
  pushd "${STARPHLEET_ENHANCE_CACHE}" > /dev/null
  "${STARPHLEET_ENHANCE_CACHE}/connect.sh"
  popd > /dev/null
}


##########################################################
## Patch and Push
##########################################################
p () {
  VERSION=$(npm version patch)
  git push origin $VERSION
}

##########################################################
## Docker Run
##########################################################
function drun() {
  docker run -it --rm --init "$@"
}

##########################################################
## Docker Run
##########################################################
function dex() {
  docker exec -it "$@"
}

##########################################################
## Who owns a GLG app
##########################################################
function whoowns() {
  for github_username in $(curl -s "https://services-internal.glgresearch.com/forkulator/who-owns?service=$1" | jq -r '.[].username'); do
    USER=$(curl -s "https://services-internal.glgresearch.com/forkulator/github-username-to-glg-email?user=${github_username}" | jq -r '.email');
    echo $USER
  done
}

##########################################################
## Get password from Lastpass and copy to clipboard
##########################################################
getpass () {
  IFS=$'\n'
  local account="$1"
  local lpass_entry=$(lpass ls | grep -i "${account}")
  local count=$(echo "${lpass_entry}" | wc -l)

  [ -z "${lpass_entry}" ] && return
  if [ "${count}" -gt 1 ]; then
    select lpass_entry in $(echo "${lpass_entry}"); do
      [ -n "${lpass_entry}" ] && break
    done
  fi
  echo "Copying Password To Clipboard: ${lpass_entry}"

  # Cuts the id out of something like:
  #  blah blah blah [id: 234234234234234322]
  local LPASS_ID=$(echo "${lpass_entry}" | perl -pe 's|.*?\s+(\d+)\]$|$1|')
  lpass show --password "${LPASS_ID}" | tr -d '\n' | xsel --clipboard --input \
    || lpass show --field=password "${LPASS_ID}" | tr -d '\n' | xsel --clipboard --input
}

##########################################################
## Delete all things docker from my machine and start fresh
##########################################################
purge_docker_everything () {
  docker stop $(docker container ls -q -a)
  docker rm $(docker container ls -q -a)
  docker rmi $(docker images -q) -f
  docker system prune -af
  docker network prune -f
}

function get_wiki_repo() {
  local wikiRepo
  wikiRepo=$(git remote -v \
                     | egrep 'origin.*push' \
                     | awk '{print $2}' \
                     | perl -pe 's|\.git$|\.wiki\.git|')

  git clone "$wikiRepo" ../$(basename $PWD).wiki
}

# Run on Change
function roc() {
  local file
  local command
  file="$1"
  command="$2"

  # If no command specified, run the file declared
  [ -n "$command" ] || command="$file"

  nodemon -w "$file" -x "$command"
}

# Get Expense Date
# For getting the date stamp for an expense
function ged() {
  THE_DATE_TIME=$(date +'%Y%m%d%H%M')
  echo "The Date/Time is Copied to Clipboard: $THE_DATE_TIME"
  echo -n "$THE_DATE_TIME" | clip.exe
}
