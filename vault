#! /usr/bin/env bash


sp() {
  if ! bw status | jq -r '.userId' | grep -q 'dc3d5004-3e8d-42d3-ad7d-b0de01512009'; then
    API_KEY="$(bw get item d9156b54-fcf2-4d2a-bee8-b0f200e61b86)"
    export BW_CLIENTID="$(echo "$API_KEY" | jq -r '.login.username')"
    export BW_CLIENTSECRET="$(echo "$API_KEY" | jq -r '.login.password')"

    MP="$(bw get item 1778eacd-bc34-4441-853f-b0de0150c2af)"
    export BW_MP="$(echo "$MP" | jq -r '.login.password')"

    bw logout
    bw login --apikey
  else
    echo "Already logged in to other profile"
  fi
  [ -n "$BW_MP" ] && bw unlock --passwordenv BW_MP --raw > "${BW_SESSION_FILE}"
  [ -f "${BW_SESSION_FILE}" ] && export BW_SESSION=$(cat ${BW_SESSION_FILE})
}

mp() {
  echo "$BW_MP" | pbcopy
}

cisco_login() {
  local cisco_username="$1"
  local cisco_password="$2"
  local cisco_enable="$3"
  local connection_command="$4"
  CISCO_LOGIN_USERNAME="$cisco_username"
  local command_with_username="$(eval echo "$connection_command")"
  if echo "$connection_command" | grep -q "telnet"; then
    local after_login_command="
        expect \"Username:\"
        send \"$cisco_username\r\"
        expect \"Password:\"
        send \"$cisco_password\r\"
    "
  else
    local after_login_command="
      expect {
         \"*yes/no*\" { send \"yes\r\"; exp_continue }
         -re {([Pp]assword:)} { send \"$cisco_password\r\" }
      }
    "
  fi
  if [ -n "$cisco_enable" ]; then
    local enable_commands="
        expect \">\"
        send \"enable\r\"
        expect \"Password:\"
        send \"$cisco_enable\r\"
        expect \"#\"
    "
  fi
  expect -c "
    spawn $command_with_username
    $after_login_command
    $enable_commands
    interact
  "
}

cl() {
  local _connections="$(bw list items --collectionid f6afb5ed-511d-45dd-a5e6-b0f20123b8ce)"
  LIST="$(echo "$_connections" | jq -r '.[].name')"
  SELECTION="$(echo "$LIST" | fzf)"
  [ -z "$SELECTION" ] && return
  IP_ADDRESS="$(echo "$SELECTION" | grep -oP '(\d{1,3}\.){3}\d{1,3}')"
  ONLY_SELECTION="$(echo "$_connections" | jq -r "[.[] | select(.name | contains(\"$IP_ADDRESS \"))]")"
  LOGIN_CREDS=$(jq -r ".[] | select(.name | contains(\"| Login\"))" <<< $ONLY_SELECTION)
  if [ -z "$LOGIN_CREDS" ]; then
    LOGIN_CREDS="$(bw list items --search "Cisco Tacacs Credentials" | jq -r ".[]")"
  fi
  if [ -z "$LOGIN_CREDS" ]; then
    # Login with your own creds or provided creds
    echo -n "TACACS Username: "
    read cisco_username
    echo -n "TACACS Password: "
    read -s cisco_password
    echo ""
  else
    cisco_username="$(echo "$LOGIN_CREDS" | jq -r ".login.username")"
    cisco_password="$(echo "$LOGIN_CREDS" | jq -r ".login.password")"
  fi
  ENABLE_CREDS="$(echo "$ONLY_SELECTION" | jq -r ".[] | select(.name | contains(\"| Enable\")) | .login.password")"
  CONNECTION_COMMAND="$(echo "$ONLY_SELECTION" | jq -r 'limit(1; .[] | select(.notes != null and .notes != "")) | .notes')"
  cisco_login "$cisco_username" "$cisco_password" "$ENABLE_CREDS" "$CONNECTION_COMMAND"
}

wl() {
  _prtgNucs="$(bw list items --collectionid 902ae5fe-8965-495f-9f12-b0f900e966e2)"
  _generalEntries="$(bw list items --collectionid 8f60a0cf-dfbd-488a-8583-b0f20123c81a --search "RDP")"

  allEntries=$(jq -s 'add' <(cat <<< $_prtgNucs) <(cat <<< $_generalEntries))

  LIST=$(jq -r '.[].name' <<< $allEntries)
  SELECTION=$(fzf <<< $LIST)
  [ -z "$SELECTION" ] && return
  IP_ADDRESS="$(echo "$SELECTION" | grep -oP '(\d{1,3}\.){3}\d{1,3}')"
  ONLY_SELECTION=$(jq -r "[.[] | select(.name | contains(\"$IP_ADDRESS\"))]" <<< $allEntries)
  LOGIN_CREDS=$(jq -r ".[] | select(.name | contains(\"| Login\"))" <<< $ONLY_SELECTION)
  CONNECTION_COMMAND=$(jq -r 'limit(1; .[] | select(.notes != null and .notes != "")) | .notes' <<< $ONLY_SELECTION)
  local WINDOWS_USERNAME=$(jq -r '.login.username' <<< $LOGIN_CREDS)
  local WINDOWS_PASSWORD=$(jq -r '.login.password' <<< $LOGIN_CREDS)

  # Using the notes in the vault,
  # this will eval those commands
  # and log you in automatically.
  # The caveat being that the usernames
  # may have a single backslash ("\")
  # and we need to escape it to play
  # nice in shells

  eval command_with_username=\"$CONNECTION_COMMAND\"
  local command_with_backslashes_fixed=$(echo "$command_with_username" | sed 's/\\/\\\\/g')
  eval $command_with_backslashes_fixed
}
