#! /usr/bin/env bash

#############################################################################
# Utility Function(s)
#############################################################################
# shhhhh
function _which () {
  which $1 > /dev/null
}

#############################################################################
# Checkout our dotfiles
#############################################################################
DOT_FILES_REPO=${DOT_FILES_REPO:-"git@github.com:bhudgens/dotfiles.git"}
if [ ! -d "$HOME/.dotfiles" ]; then
  git checkout "${DOT_FILES_REPO}" "$HOME/.dotfiles"
fi

#############################################################################
# Software Install - Mac Poo
#############################################################################
brew_install () {
  BREW_CMD="$(which brew)"
  if [ ! -f "${BREW_CMD}" ]; then
    echo Brew not found
    return
  fi

  BREW_CMD="$1"
  which "${BREW_CMD}" > /dev/null
  if [ $? -gt 0 ]; then
    brew install "${BREW_CMD}"
  fi
}

if echo $OSTYPE | grep -i darwin > /dev/null; then
  # List of the things
  brew_install bat
  brew_install diff-so-fancy
  # Aliases based on successes
fi


#############################################################################
# Software Install - Linux Poo
#############################################################################
apt_get_install () {
  APP="$(basename $1)"
  [ -n "$2" ] && CHECK="$2" || CHECK="$1"
  if ! which "$CHECK" > /dev/null; then
    [ -z "${RUN_ONCE}" ] && sudo apt-get update -y && RUN_ONCE=true
    sudo apt-get install -y $APP
  fi
}

npm_install () {
  APP="$(basename $1)"
  [ -z "$2" ] || APP="$2"
  if ! which "${APP}" > /dev/null; then
    sudo mkdir -p /usr/lib/node_modules
    sudo mkdir -p /usr/local/lib
    sudo chown -R "${USER}:${USER}" /usr/lib/node_modules
    sudo chown -R "${USER}:${USER}" /usr/local/lib
    sudo chown "root:adm" /usr/bin
    sudo chmod 775 /usr/bin
    sudo chown "root:adm" /usr/local/bin
    sudo chmod 775 /usr/local/bin
    npm install -g "$1"
  fi
}

if echo $OSTYPE | grep -i linux > /dev/null; then
  apt_get_install nodejs node
  apt_get_install npm
  apt_get_install git
  apt_get_install curl
  apt_get_install wget
  apt_get_install tmux
  apt_get_install openvpn
  apt_get_install traceroute
  apt_get_install strace
  apt_get_install jq
  apt_get_install silversearcher-ag ag
  # Needed for coc-lua lsp server vim plugin
  # Link: https://stackoverflow.com/questions/20079572/srlua-makefile-error-lua-h-no-such-file-or-directory/20080097
  apt_get_install liblua5.3-dev

  # These two collide right now so this is temporary.  See issue below
  # apt_get_install bat batcat
  # apt_get_install ripgrep rg
  # Fixing Bug: https://github.com/sharkdp/bat/issues/938#issuecomment-646745610
  if ! _which batcat \
  || ! _which rg; then
    sudo apt install -o Dpkg::Options::="--force-overwrite" bat ripgrep
  fi

  if type rg &> /dev/null; then
    export FZF_DEFAULT_COMMAND='rg --files'
    export FZF_DEFAULT_OPTS='-m --height 50% --border'
  fi

  if ! _which fzf; then
    git clone --depth 1 https://github.com/junegunn/fzf.git "$HOME/.fzf"
    pushd "$HOME/.fzf" > /dev/null
    ./install.sh --key-bindings --completion --update-rc
    popd > /dev/null
  fi

  export GITHUB_ORGS=${GITHUB_ORGS:-"glg,glg-core,custom-elements,igroff,wballard,bhudgens"}
  npm_install "git-clone-cli" "clone"

  for file in .zshrc .tmux.conf; do
    if [ ! -L "${HOME}/${FILE}" ] \
    && [ -f "${HOME}/.dotfiles/${FILE}" ]; then
      mv "${HOME}/${FILE}" "${HOME}/${FILE}.bak"
      ln -s "${HOME}/.dotfiles/${FILE}" "${HOME}/${FILE}"
    fi
  done

  if [ -f "${HOME}/.oh-my-zsh/themes/agnoster.zsh-theme" ] \
  && ! grep prompt_context "${HOME}/.oh-my-zsh/themes/agnoster.zsh-theme" | grep -v '{' | grep '#' > /dev/null; then
    sed -i 's|prompt_context$|# prompt_context$|' "${HOME}/.oh-my-zsh/themes/agnoster.zsh-theme"
  fi

  if ! which kitty > /dev/null; then
    pushd /tmp > /dev/null
    apt_get_install libjs-underscore
    apt_get_install libjs-sphinxdoc
    curl -L https://sw.kovidgoyal.net/kitty/installer.sh | sh /dev/stdin
    popd
  fi

  if [ ! -L "${HOME}/.config/kitty/kitty.conf" ] \
  && [ -f "${HOME}/.dotfiles/kitty.conf" ]; then
    mkdir -p $(dirname "${HOME}/.config/kitty/kitty.conf")
    [ -f "${HOME}/.config/kitty/kitty.conf" ] && mv "${HOME}/.config/kitty/kitty.conf" "${HOME}/.config/kitty/kitty.conf.bak"
    ln -s "${HOME}/.dotfiles/kitty.conf" "${HOME}/.config/kitty/kitty.conf"
  fi

fi

if ! _which lpass; then
  apt_get_install bash-completion
  apt_get_install build-essential
  apt_get_install cmake
  apt_get_install git
  apt_get_install libcurl4
  apt_get_install libcurl4-openssl-dev
  apt_get_install libssl-dev
  apt_get_install libxml2
  apt_get_install libxml2-dev
  apt_get_install libssl1.1
  apt_get_install pkg-config
  apt_get_install ca-certificates
  apt_get_install xclip

  TMP_LPASS_INSTALL_DIR="/tmp/lastpass-cli"
  mkdir -p "${TMP_LPASS_INSTALL_DIR}"
  git clone "https://github.com/lastpass/lastpass-cli.git" "${TMP_LPASS_INSTALL_DIR}"
  pushd "${TMP_LPASS_INSTALL_DIR}" > /dev/null
    make
    sudo make install
  popd > /dev/null
fi

# When installing modules with npm always pin version
npm config set save-prefix ''

#############################################################################
# Global Configs
#############################################################################
# If bat successfully gets installed we will
# swap cat with bat
if _which batcat; then
  alias cat='batcat'
fi

# Install prettyping
if ! _which prettyping; then
  pushd /tmp > /dev/null
  curl -s -O https://raw.githubusercontent.com/denilsonsa/prettyping/master/prettyping
  sudo cp prettyping /usr/local/bin
  echo Installing prettyping
  sudo chmod +x /usr/local/bin/prettyping
  popd > /dev/null
fi

if [ -f /usr/local/bin/prettyping ]; then
  alias ping='prettyping --nolegend'
fi

