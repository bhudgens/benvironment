#!/usr/bin/env bash
#############################################################################
# Dynamically Connect to AWS Resources
#############################################################################

# The request from amazon
INSTANCES_JSON="$HOME/run/ec2-instances.json"
# The formatting takes a bit so lets cache that too
INSTANCES_CACHE="$HOME/run/ec2-instances.cache"

function _loggedIntoAwsCli() {
  aws sts get-caller-identity > /dev/null 2> /dev/null
}

function _getInstancesTable() {
  local search="$1"

  # Skip all this if we already have the cache
  if [ ! -f "$INSTANCES_JSON" ]; then
    ! _loggedIntoAwsCli && echo "Not logged into AWS CLI" && return
    echo "Caching All EC2 Instance Info..."
    aws --region us-east-1 ec2 describe-instances > "$INSTANCES_JSON"
  fi

  if [ ! -f "$INSTANCES_CACHE" ]; then
    echo "Formatting for Search (Takes a bit the first time)..."
    # Using ^ as a delim since | is used a lot in practice
    # The below acts as a 'header'
    printf -v OUTPUT 'InstanceId^Name^PrivateIp^PublicIp'

    # Now lets make it fzf friendly
    for instance_id in $(jq -r '.Reservations[].Instances[].InstanceId' "$INSTANCES_JSON"); do
      INSTANCE=$(jq ".Reservations[].Instances[] | select(.InstanceId == \"$instance_id\")" "$INSTANCES_JSON") 
      # Not all instances will have a name so we set a default
      NAME=$(echo "$INSTANCE" | jq -r '.Tags[] | select(.Key == "Name") | .Value')
      [ -z "$NAME" ] && NAME="Not Set"
      # The rest of this is normal
      INSTANCE_ID=$(echo "$INSTANCE" | jq -r '.InstanceId')
      PUBLIC_IP_ADDRESS=$(echo "$INSTANCE" | jq -r '.PublicIpAddress')
      PRIVATE_IP_ADDRESS=$(echo "$INSTANCE" | jq -r '.PrivateIpAddress')
      printf -v OUTPUT "$OUTPUT"'\n'"$INSTANCE_ID^$NAME^$PRIVATE_IP_ADDRESS^$PUBLIC_IP_ADDRESS"
    done

    # And remember our work for next time
    echo "$OUTPUT" > "$INSTANCES_CACHE"
  else
    OUTPUT=$(cat "$INSTANCES_CACHE")
  fi

  TABLE=$(echo "$OUTPUT" | column -s'^' -t)
}

function con() {
  local search="$1"
  if _getInstancesTable "$search" && [ -n "$TABLE" ]; then
    SELECTED_INSTANCE=$(echo "$TABLE" | fzf --layout=reverse --header-lines=1 ${search:+"-q $search"} | awk '{print $1}')
    [ -n "$SELECTED_INSTANCE" ] && aws --region us-east-1 ssm start-session --target "$SELECTED_INSTANCE"
  fi
}
